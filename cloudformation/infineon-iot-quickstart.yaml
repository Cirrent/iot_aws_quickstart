AWSTemplateFormatVersion: 2010-09-09
Transform: "AWS::Serverless-2016-10-31"
Resources:
  CirrentCertificateBucket:
    Type: AWS::S3::Bucket
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt "CopyZipsFunction.Arn"
      DestBucket: !Ref "CirrentCertificateBucket"
      SourceBucket: cirrent-quickstarts
      Prefix: "lambdas/"
      Objects:
        - interop.zip
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::cirrent-quickstarts/lambdas*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${CirrentCertificateBucket}/lambdas*"
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt "CopyZipsRole.Arn"
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse


          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print(('copy_source: %s' % copy_source))
                  print(('dest_bucket = %s'%dest_bucket))
                  print(('key = %s' %key))
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)


          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print(('Received event: %s' % json.dumps(event)))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  CirrentInterop:
    DependsOn: CopyZips
    Type: AWS::Serverless::Function
    Properties:
      Events:
        RegisterThingApi:
          Type: Api
          Properties:
            Path: /interop
            Method: post
          Integration: lambda
      Handler: "src/app.handler"
      Runtime: nodejs14.x
      PackageType: Zip
      CodeUri:
        Bucket: !Ref "CirrentCertificateBucket"
        Key: "lambdas/interop.zip"
      Policies:
        - AWSIoTThingsRegistration
        - Statement:
            - Sid: S3ListBucketAccesstoRootCABucket
              Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
                !Join ["", ["arn:aws:s3:::", !Ref CirrentCertificateBucket]]
            - Sid: S3GetAccessToRootCABucket
              Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                !Join [
                  "",
                  [
                    "arn:aws:s3:::",
                    !Ref CirrentCertificateBucket,
                    "/root_ca.pem",
                  ],
                ]
            - Sid: AllowCertificateRegisterWithoutCA
              Effect: Allow
              Action:
                - iot:RegisterCertificateWithoutCA
                - iot:DescribeEndpoint
              Resource: "*"
      Environment:
        Variables:
          IOT_POLICY: cloud_managed_iot_policy
          S3_BUCKET_NAME_ROOT_CA: !Ref CirrentCertificateBucket
          AUDIENCE: !Ref "AWS::AccountId"
          DEFAULT_TOPIC: "iqs"
      Timeout: 300
  CirrentCloudManagedIoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "*"
            Resource:
              - "*"
      PolicyName: cloud_managed_iot_policy
Outputs:
  AccountId:
    Description: Your AWS account identifier
    Value: !Ref "AWS::AccountId"
  GatewayId:
    Description: Your API Gateway identifier
    Value: !Ref ServerlessRestApi
  Region:
    Description: The region your new resources are deployed in
    Value: !Ref "AWS::Region"
  Stage:
    Description: The gateway deployment environment you wish us to use
    Value: Prod
